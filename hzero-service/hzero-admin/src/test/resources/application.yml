spring:
  application:
    name: hzero-admin
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hzero_admin?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    jedis:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  resources:
    # 资源缓存时间，单位秒
    cache.period: 3600
    # 开启gzip压缩
    chain.gzipped: true
    # 启用缓存
    chain.cache: true

server: 
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
    # 默认值为8，建议设置每个CPU核心一个线程
    io-threads: ${SERVER_UNDERTOW_IO_THREADS:4}
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
    # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
    worker-threads: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    max-http-post-size: 10485760
    allow-unescaped-characters-in-url: true
  jetty:
    # HTTP post/put 内容字节限制值
    max-http-post-size: ${SERVER_JETTY_MAX_HTTP_POST_SIZE:200000}
    # 接受器线程数，-1表示由操作环境决定
    acceptors: ${SERVER_JETTY_ACCEPTORS:-1}
    # 选择器线程数，-1表示由操作环境决定
    selectors: ${SERVER_JETTY_SELECTORS:-1}
  tomcat:
    # 允许的代理ip的正则表达式
    #internal-proxies:
    # 协议头，通常为X-Forwarded-Proto
    protocol-header: X-Forwarded-Proto
    # 当协议头为xxx值时，认为需要使用ssl，通常为https
    protocol-header-https-value: https
    # 端口头，通常为X-Forwarded-Port
    port-header: X-Forwarded-Port
    # 远程ip头，通常为X-Forwarded-For
    remote-ip-header: X-Forwarded-For
    # tomcat基本目录，不指定时使用临时文件夹
    #basedir:
    # 后台处理器的延时时长，默认为10s
    background-processor-delay: 10s
    # 工作线程的最大数量，默认200
    max-threads: ${SERVER_TOMCAT_MAX_THREADS:200}
    # 工作线程的最小数量，默认10
    min-spare-threads: 10
    # HTTP post请求内容字节限制，默认2097152
    max-http-post-size: ${SERVER_TOMCAT_MAX_HTTP_POST_SIZE:2097152}
    # HTTP 请求头字节限制，默认0，表示使用web容器的默认限制值
    max-http-header-size: 0
    # 是否要对重定向到上下文根的请求路径上添加/，默认true
    redirect-context-root: true
    # 重定向是否使用相对路径
    #use-relative-redirects: false
    # URI的解码字符集
    uri-encoding: UTF-8
    # 最大连接数，当连接数达到限制，请求会被阻塞到队列，队列大小由accept-count属性决定
    max-connections: ${SERVER_TOMCAT_MAX_CONNECTIONS:10000}
    # 阻塞队列大小
    accept-count: ${SERVER_TOMCAT_ACCEPT_COUNT:100}
    # 使得TLD扫描忽略的正则表达式列表
    #additional-tld-skip-patterns:
    # 静态资源配置
    #resource:
      # 静态资源缓存的存活时间，超时清除
      #cache-ttl:

feign:
  hystrix:
    enabled: true

hystrix:
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量
      # 默认10
      coreSize: 1000
      # 最大执行线程数
      maximumSize: 1000
  command:
    default:
      execution:
        isolation:
          thread:
            # HystrixCommand 执行的超时时间，超时后进入降级处理逻辑。一个接口，理论的最佳响应速度应该在200ms以内，或者慢点的接口就几百毫秒。
            # 默认 1000 毫秒，最高设置 2000足矣。如果超时，首先看能不能优化接口相关业务、SQL查询等，不要盲目加大超时时间，否则会导致线程堆积过多，hystrix 线程池卡死，最终服务不可用。
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:40000}

ribbon:
  # 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 客户端连接超时时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:3000}
  # 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true

hzero:
  lov:
    sql:
      enabled: ${HZERO_LOV_SQL_ENABLED:true}
    value:
      enabled: ${HZERO_LOV_VALUE_ENABLED:true}
  data:
    permission:
      db-owner: ${HZERO_DB_OWNER:}
  config:
    route:
      skip-parse-services: register, gateway, oauth
  # 开启metric同步功能，开启后会收集网关的api请求情况信息并写入db
  metric:
    sync:
      enable: ${HZERO_METRIC_SYNC_ENABLE:false}
  # 开启日志追溯功能，开启后会根据需求将请求信息上报到redis
  trace:
    redis-reporter:
      enable: ${HZERO_TRACE_REDIS_REPORTER_ENABLE:false}

logging:
  level:
    root: ${LOG_LEVEL:info}
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}

